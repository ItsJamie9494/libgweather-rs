// This file was generated by gir (https://github.com/gtk-rs/gir)
// from 
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use bitflags::bitflags;
use glib::translate::*;
use glib::value::FromValue;
use glib::value::ToValue;
use glib::StaticType;
use glib::Type;
use std::fmt;

bitflags! {
    #[doc(alias = "GWeatherFormatOptions")]
    pub struct FormatOptions: u32 {
        #[doc(alias = "GWEATHER_FORMAT_OPTION_DEFAULT")]
        const DEFAULT = ffi::GWEATHER_FORMAT_OPTION_DEFAULT as u32;
        #[doc(alias = "GWEATHER_FORMAT_OPTION_SENTENCE_CAPITALIZATION")]
        const SENTENCE_CAPITALIZATION = ffi::GWEATHER_FORMAT_OPTION_SENTENCE_CAPITALIZATION as u32;
        #[doc(alias = "GWEATHER_FORMAT_OPTION_NO_CAPITALIZATION")]
        const NO_CAPITALIZATION = ffi::GWEATHER_FORMAT_OPTION_NO_CAPITALIZATION as u32;
    }
}

impl fmt::Display for FormatOptions {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        <Self as fmt::Debug>::fmt(self, f)
    }
}

#[doc(hidden)]
impl IntoGlib for FormatOptions {
    type GlibType = ffi::GWeatherFormatOptions;

    fn into_glib(self) -> ffi::GWeatherFormatOptions {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GWeatherFormatOptions> for FormatOptions {
    unsafe fn from_glib(value: ffi::GWeatherFormatOptions) -> Self {
        skip_assert_initialized!();
        Self::from_bits_truncate(value)
    }
}

impl StaticType for FormatOptions {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::gweather_format_options_get_type()) }
    }
}

impl glib::value::ValueType for FormatOptions {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for FormatOptions {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        skip_assert_initialized!();
        from_glib(glib::gobject_ffi::g_value_get_flags(value.to_glib_none().0))
    }
}

impl ToValue for FormatOptions {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_flags(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

bitflags! {
    #[doc(alias = "GWeatherProvider")]
    pub struct Provider: u32 {
        #[doc(alias = "GWEATHER_PROVIDER_NONE")]
        const NONE = ffi::GWEATHER_PROVIDER_NONE as u32;
        #[doc(alias = "GWEATHER_PROVIDER_METAR")]
        const METAR = ffi::GWEATHER_PROVIDER_METAR as u32;
        #[doc(alias = "GWEATHER_PROVIDER_IWIN")]
        const IWIN = ffi::GWEATHER_PROVIDER_IWIN as u32;
        #[doc(alias = "GWEATHER_PROVIDER_MET_NO")]
        const MET_NO = ffi::GWEATHER_PROVIDER_MET_NO as u32;
        #[doc(alias = "GWEATHER_PROVIDER_OWM")]
        const OWM = ffi::GWEATHER_PROVIDER_OWM as u32;
        #[doc(alias = "GWEATHER_PROVIDER_ALL")]
        const ALL = ffi::GWEATHER_PROVIDER_ALL as u32;
    }
}

impl fmt::Display for Provider {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        <Self as fmt::Debug>::fmt(self, f)
    }
}

#[doc(hidden)]
impl IntoGlib for Provider {
    type GlibType = ffi::GWeatherProvider;

    fn into_glib(self) -> ffi::GWeatherProvider {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GWeatherProvider> for Provider {
    unsafe fn from_glib(value: ffi::GWeatherProvider) -> Self {
        skip_assert_initialized!();
        Self::from_bits_truncate(value)
    }
}

impl StaticType for Provider {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::gweather_provider_get_type()) }
    }
}

impl glib::value::ValueType for Provider {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for Provider {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        skip_assert_initialized!();
        from_glib(glib::gobject_ffi::g_value_get_flags(value.to_glib_none().0))
    }
}

impl ToValue for Provider {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_flags(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

